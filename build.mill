//| mill-version: 1.0.1
//| repositories: [https://s01.oss.sonatype.org/content/repositories/snapshots]
//| mvnDeps:
//| - com.lihaoyi::mill-contrib-scoverage:$MILL_VERSION
//| - com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION
//| - com.lihaoyi::mill-contrib-jmh:$MILL_VERSION
//| - com.carlosedp::mill-aliases::1.1.0
//| - com.goyeau::mill-scalafix::0.6.0
//| - org.typelevel::scalac-options:0.1.7

import mill.*, mill.scalalib.*
import scalafmt.*, publish.*
import scalajslib.*, mill.scalajslib.api.*
import scalanativelib.*, mill.scalanativelib.api.*
import mill.contrib.scoverage.{ScoverageModule, ScoverageReport}
import mill.contrib.buildinfo.BuildInfo
import com.goyeau.mill.scalafix.ScalafixModule
import org.typelevel.scalacoptions.*
import com.carlosedp.aliases.*

// Versions

object versions:
  val scala213      = "2.13.16"
  val scala3        = "3.3.6"
  val scalaNative   = "0.5.7"
  val scalaJs       = "1.19.0"
  val scalaVersions = Seq(scala213, scala3)
  val scalatest     = "3.2.19"
  val oslib         = "0.11.4"
  val mainargs      = "0.7.6"
  val scoverage     = "2.3.0"
  val scalajsdom    = "2.8.1"

object riscvassembler extends Module:
  object jvm extends Cross[RiscvAssemblerJVMModule](versions.scalaVersions)
  trait RiscvAssemblerJVMModule
      extends ScalaModule
      with RiscvAssemblerModule
      with RiscvAssemblerPublish
      with ScoverageModule:
    def scoverageVersion = versions.scoverage
    object test extends ScalaTests with ScoverageTests with RiscvAssemblerTests:
      // Add JVM specific tests to the source path
      def testSourcesJVM   = Task.Sources(super.moduleDir / "jvm")
      override def sources = super.sources() ++ testSourcesJVM()

  object native extends Cross[RiscvAssemblerNativeModule](versions.scalaVersions)
  trait RiscvAssemblerNativeModule extends ScalaNativeModule with RiscvAssemblerModule with RiscvAssemblerPublish:
    def scalaNativeVersion = versions.scalaNative
    object test extends ScalaNativeTests with RiscvAssemblerTests

  object scalajs extends Cross[RiscvAssemblerScalajsModule](versions.scalaVersions)
  trait RiscvAssemblerScalajsModule extends ScalaJSModule with RiscvAssemblerModule with RiscvAssemblerPublish:
    def scalaJSVersion = versions.scalaJs
    def mvnDeps        = Seq(mvn"org.scala-js::scalajs-dom::${versions.scalajsdom}")

    def scalaJSUseMainModuleInitializer = true
    def moduleKind                      = Task(ModuleKind.CommonJSModule)
    def jsEnvConfig                     = Task(JsEnvConfig.NodeJs())
    object test extends ScalaJSTests with RiscvAssemblerTests

trait RiscvAssemblerModule
    extends PlatformScalaModule
    with CrossScalaModule
    with BuildInfo
    with ScalafixModule
    with ScalafmtModule:
  def mvnDeps = Seq(
    mvn"com.lihaoyi::os-lib::${versions.oslib}"
  )
  def artifactName = "riscvassembler"
  def scalacOptions = Task:
    super.scalacOptions() ++
      ScalacOptions.defaultTokensForVersion(
        ScalaVersion.unsafeFromString(scalaVersion())
      )

  def currentTag      = Task(os.proc("git", "describe", "--tags", "--abbrev=0").call().out.trim())
  def commits         = Task(os.proc("git", "rev-list", "--count", s"${currentTag()}..HEAD").call().out.trim().toInt)
  def currentCommit   = Task(os.proc("git", "rev-parse", "HEAD").call().out.trim())
  def commitDate      = Task(os.proc("git", "log", "-1", "--format=%ai").call().out.trim())
  def currentRevision = Task(s"${publishVer()}+${commits()}-${currentCommit().take(7)}")
  def publishVer = Task:
    val isTag = Task.env.get("GITHUB_REF").exists(_.startsWith("refs/tags"))
    if isTag && commits() == 0 then currentTag().stripPrefix("v")
    else
      val Array(major, minor, patch) = currentTag().stripPrefix("v").split('.').map(_.toInt)
      s"$major.${minor + 1}.$patch-SNAPSHOT"

  def buildInfoPackageName = "com.carlosedp.riscvassembler"
  def buildInfoMembers = Seq(
    BuildInfo.Value("appName", artifactName.toString),
    BuildInfo.Value("appVersion", publishVer()),
    BuildInfo.Value("revision", currentRevision()),
    BuildInfo.Value("buildCommit", currentCommit()),
    BuildInfo.Value("commitDate", commitDate()),
    BuildInfo.Value("buildDate", new java.util.Date().toString),
  )

  trait RiscvAssemblerTests extends ScalaTests with TestModule.ScalaTest:
    def mvnDeps = Seq(mvn"org.scalatest::scalatest::${versions.scalatest}")

trait RiscvAssemblerPublish extends RiscvAssemblerModule with SonatypeCentralPublishModule:
  def publishVersion = super.publishVer()
  def pomSettings = PomSettings(
    description    = "RiscvAssembler is a RISC-V assembler library to be used on Scala and Chisel HDL projects.",
    organization   = "com.carlosedp",
    url            = "https://github.com/carlosedp/riscvassembler",
    licenses       = Seq(License.MIT),
    versionControl = VersionControl.github("carlosedp", "RiscvAssembler"),
    developers = Seq(
      Developer("carlosedp", "Carlos Eduardo de Paula", "https://github.com/carlosedp")
    ),
  )

// Build rvasmcli Scala Native binary for current platform
// Scala Native: `./mill show rvasmcli.nativeLink`
object rvasmcli extends RVASMcliBase:
  object test extends ScalaNativeTests with TestModule.ScalaTest:
    def mvnDeps     = Seq(mvn"org.scalatest::scalatest::${versions.scalatest}")
    def releaseMode = ReleaseMode.Debug

// Build rvasmcli Scala Native binary for cross-architecture depending on LLVM Triple setting below.
// Cross build for all available architectures on current OS with: `./mill show rvasmclicross.__.nativeLink`
// On Mac, install LLVM using Homebrew which contains libs for amd64 and arm64
// On Linux, install "build-essential clang build-essential clang crossbuild-essential-arm64 crossbuild-essential-riscv64 crossbuild-essential-amd64 crossbuild-essential-ppc64el"
def LLVMTriples = System.getProperty("os.name").toLowerCase match
  case os if os.contains("linux") =>
    Seq("x86_64-linux-gnu", "arm64-linux-gnu", "powerpc64le-linux-gnu", "riscv64-linux-gnu")
  case os if os.contains("mac") =>
    Seq("x86_64-apple-darwin20.3.0", "arm64-apple-darwin20.3.0")
object rvasmclicross extends Cross[RVASMCLI](LLVMTriples)
trait RVASMCLI extends Cross.Module[String] with RVASMcliBase:
  def nativeTarget = Some(crossValue)

// This trait allows building Scala Native for current platform and cross-building for other platforms
trait RVASMcliBase extends ScalaNativeModule with ScalafixModule with ScalafmtModule:
  def scalaVersion       = versions.scala3
  def scalaNativeVersion = versions.scalaNative
  def moduleDeps         = Seq(riscvassembler.native(versions.scala3))
  def moduleDir          = build.moduleDir / "rvasmcli"
  def mvnDeps = Seq(
    mvn"com.lihaoyi::os-lib::${versions.oslib}",
    mvn"com.lihaoyi::mainargs::${versions.mainargs}",
  )
  def logLevel    = NativeLogLevel.Info
  def releaseMode = ReleaseMode.ReleaseFast
  if System.getProperty("os.name").toLowerCase == "linux" then
    def nativeLTO            = LTO.Thin
    def nativeLinkingOptions = Array("-static", "-fuse-ld=lld")

// Aggregate reports for all projects
object scoverage extends ScoverageReport:
  override def scalaVersion     = versions.scala3
  override def scoverageVersion = versions.scoverage

// -----------------------------------------------------------------------------
// Command Aliases
// -----------------------------------------------------------------------------
object MyAliases extends Aliases:
  def lint = alias(
    s"riscvassembler.jvm[${versions.scala3}].fix",
    "rvasmcli.fix",
    "mill.scalalib.scalafmt.ScalafmtModule/reformatAll __.sources",
  )
  def deps     = alias("mill.scalalib.Dependency/showUpdates")
  def checkfmt = alias("mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll __.sources")
  def coverage = alias(
    s"riscvassembler.jvm[${versions.scala3}].test",
    "rvasmcli.test",
    "scoverage.htmlReportAll",
    "scoverage.xmlReportAll",
    "scoverage.consoleReportAll",
  )
  def pub      = alias("mill.scalalib.SonatypeCentralPublishModule/")
  def publocal = alias("riscvassembler.__.publishLocal")
  def cli      = alias("show rvasmcli.nativeLink")
  def testall  = alias("riscvassembler.__.test", "rvasmcli.test")
  def test     = alias(s"riscvassembler.jvm[${versions.scala3}].test", "rvasmcli.test")
